# ðŸ“¡ PDS: Git Action for LDD Generation
# =====================================
#
# This is a GitHub action that generates LDD for the current LDD Github Repo

---

name: 'âœ… PDS LDD Generation'
author: 'Jordan Padams <jordan.h.padams@jpl.nasa.gov>'
branding:
  icon: 'archive'
  color: 'green'

inputs:
  datapath:
    description: |
      Absolute path to data to validate
    required: true
  pds4_im_version:
    description: |
      PDS4 Information Model Version. Defaults to the latest version. Use the semantic version, e.g. 1.14.0.0
    required: false
    default: 'latest'
  pds4_im_short_version:
    description: |
      PDS4 Information Model Version. Defaults to the latest version. Use the short version, e.g. 1E00
    required: false
    default: 'latest'
  schemas:
    description: |
      Path(s) to schemas to use for validation. By default, validate will use the schemas specified in the PDS4 labels.
    required: false
  schematrons:
    description: |
      Path(s) to schematrons to use for validation. By default, validate will use the schemas specified in the PDS4 labels.
    required: false
    default: 'false'
  pds_schema_url:
    description: |
      Base URL to the PDS Core schema.
    required: false
    default: 'https://pds.nasa.gov/pds4/pds/v1/'
  test_dir:
    description: |
      Path to regression test data containing PDS4 labels.
    required: false
  github_token:
    description: |
      Github secret token
    required: true

runs:
  using: 'composite'
  # using: 'composite'
  # image: 'Dockerfile'
  steps:
    - run: '${{ github.action_path }}/ldd-generation.sh "${{inputs.datapath}}" "${{inputs.pds4_im_version}}"'
      shell: bash
    # - run: |
    #     git config --local user.email "action@github.com"
    #     git config --local user.name "GitHub Action"
    #     git config --local github.token ${{ inputs.github_token }}
    #     git add $DEPLOY_DIR
    #     git commit -m "Auto-generated dictionaries from Github Actions"
    #     git config --global push.default current
    #     git push
    #   shell: bash
    - run: |
          # Get the PDS core dictionaries
          mkdir -p /tmp/${{inputs.pds4_im_version}}
          wget -q --directory-prefix=/tmp/${{inputs.pds4_im_version}} "${{inputs.pds_schema_url}}/PDS4_PDS_${{inputs.pds4_im_short_version}}.xsd"
          wget -q --directory-prefix=/tmp/${{inputs.pds4_im_version}} "${{inputs.pds_schema_url}}/PDS4_PDS_${{inputs.pds4_im_short_version}}.sch"
      shell: bash

    - run: |
        # Simple validation of XML generated with schema
        ${{ github.action_path }}/validate.sh "${{inputs.datapath}}/*.xml" "${{inputs.schemas}} /tmp/${{inputs.pds4_im_version}}/*.xsd" "${{inputs.schematrons}} /tmp/${{inputs.pds4_im_version}}/*.sch"
      shell: bash

    - run: |
        # Perform regression testing if tests exist
        if ls $REGRESSION_TEST_DIR/*.xml 1> /dev/null 2>&1 ; then
          # Update info in examples
          sed -i "s/\[IM_VERSION\]/$IM_VERSION/g" $REGRESSION_TEST_DIR/*.xml

          # Run VALID regression tests
          ${{ github.action_path }}/validate.sh "${{inputs.test_dir}}/*_VALID.xml" "${{inputs.schemas}} /tmp/${{inputs.pds4_im_version}}/*.xsd" "${{inputs.schematrons}} /tmp/${{inputs.pds4_im_version}}/*.sch" "false"

          # Run FAIL regression tests
          ${{ github.action_path }}/validate.sh "${{inputs.test_dir}}/*_FAIL.xml" "${{inputs.schemas}} /tmp/${{inputs.pds4_im_version}}/*.xsd" "${{inputs.schematrons}} /tmp/${{inputs.pds4_im_version}}/*.sch" "true"
        else
          echo 'Regression Tests do not exist, skipping'
          exit 0
        fi
      shell: bash

